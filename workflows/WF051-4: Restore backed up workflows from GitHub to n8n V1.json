{
  "active": false,
  "connections": {
    "Globals": {
      "main": [
        [
          {
            "node": "GitHub - get all files",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge globals and files",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set name and content": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          },
          {
            "node": "n8n - get all workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - get all files": {
      "main": [
        [
          {
            "node": "Merge globals and files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - get each file": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge globals and files": {
      "main": [
        [
          {
            "node": "GitHub - get each file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n - get all workflows": {
      "main": [
        [
          {
            "node": "Set n8n existing workflows names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If workflow already exists": {
      "main": [
        [
          {
            "node": "n8n - create workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow name already exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set n8n existing workflows names": {
      "main": [
        [
          {
            "node": "Merge Github and n8n workflows - Keep only non existing workflows based on the name",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Github and n8n workflows - Keep only non existing workflows based on the name": {
      "main": [
        [
          {
            "node": "If workflow already exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set name and content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Merge Github and n8n workflows - Keep only non existing workflows based on the name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-08-20T20:50:36.764Z",
  "id": "hmHBTuSSAf4rubfx",
  "meta": {
    "templateId": "2289",
    "templateCredsSetupCompleted": true
  },
  "name": "WF051-4: Restore backed up workflows from GitHub to n8n V1",
  "nodes": [
    {
      "parameters": {},
      "id": "540d147a-8185-4f3e-b2f4-522a19eb6b10",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        820,
        420
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "repo.owner",
              "value": "jackovw82"
            },
            {
              "name": "repo.name",
              "value": "n8n-backups"
            },
            {
              "name": "repo.path",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "7040674c-57b4-453d-acd4-69cbeff64180",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        1020,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Workflow - Restore Backups\nThis workflow will restore backed-up workflows from Github. \nIt is launch by testing the workflow\n\n### Setup\nOpen Globals and update the values below\n**repo.owner:** This is your Github username\n**repo.name:** This is the name of your repository\n**repo.path:** This is the folder where your workflows are saved, within the repository.\n\nIf your username was `n8n-io` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:\n\nrepo.owner - n8n-io\nrepo.name - n8n-backups\nrepo.path - workflows",
        "height": 464.79920462713443,
        "width": 389.78906250000017,
        "color": 2
      },
      "id": "2b3a2856-4024-4fb0-b068-6bace0e6592c",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "ba2d3355-df53-43e2-a4b2-2e031b71d687",
      "name": "Workflow name already exists",
      "type": "n8n-nodes-base.noOp",
      "position": [
        3220,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "063d51c7-0b7a-48a4-82b3-76b370fc4265",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $('Merge Github and n8n workflows - Keep only non existing workflows based on the name').item.json.name }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f012be7a-fb56-4a92-b2e5-e5ec316624e8",
      "name": "If workflow already exists",
      "type": "n8n-nodes-base.if",
      "position": [
        2960,
        500
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6be8c184-8fb7-47a9-ad42-d0dc3db1eea4",
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d1d698f2-0ccf-4865-9ecd-9e10e725d12d",
      "name": "Set n8n existing workflows names",
      "type": "n8n-nodes-base.set",
      "position": [
        1840,
        520
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}"
        },
        "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}"
      },
      "id": "d9c58650-ca2d-47c8-a887-59407fa70e1d",
      "name": "GitHub - get all files",
      "type": "n8n-nodes-base.github",
      "position": [
        1240,
        180
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "0eYR0UUza2XDwZgT",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "7bff36b1-d526-402b-bff8-7ce2af050e2d",
      "name": "n8n - get all workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1020,
        520
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "9ALFxkY91WQ8hhIe",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.path }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "277f6400-409a-4ba0-8ad7-1241768b669a",
      "name": "GitHub - get each file",
      "type": "n8n-nodes-base.github",
      "position": [
        1660,
        300
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "0eYR0UUza2XDwZgT",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "714b0cfd-9f06-4e2f-b73d-30ef39dc40e3",
              "name": "content",
              "type": "string",
              "value": "={{ $json.decodedContent }}"
            },
            {
              "id": "6f48ed58-d55a-4ee4-8cf2-373941aaa341",
              "name": "name",
              "type": "string",
              "value": "={{ $json.updatedName }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b59f5e23-729a-41fb-be4b-1aebc573393b",
      "name": "Set name and content",
      "type": "n8n-nodes-base.set",
      "position": [
        2240,
        300
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "operation": "create",
        "workflowObject": "={{ $('Set name and content').item.json.content }}",
        "requestOptions": {}
      },
      "id": "6f642a8c-9997-42b2-b9d7-3c1f02e0e26a",
      "name": "n8n - create workflow",
      "type": "n8n-nodes-base.n8n",
      "position": [
        3220,
        380
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "9ALFxkY91WQ8hhIe",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Get all Github files\n1. List all the files from your repository\n2. Get each file as a JSON. \n3. The content, retrieved as base64, is converted in the \"Set Name and Content\" node\n\n\nThe \"Set Name and Content\" node creates a list of workflows with name and content, in order to compare it with the existing n8n workflows in the workspace.",
        "height": 478.9952882299376,
        "width": 1409.0580697977275,
        "color": 2
      },
      "id": "b4ce8bdb-8c76-4c10-bf48-3664ec2f924b",
      "name": "Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        -20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "5ff560b9-8c43-401c-869f-2b4a2e13cacc",
      "name": "Merge globals and files",
      "type": "n8n-nodes-base.merge",
      "position": [
        1460,
        300
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "008d21d9-007b-44da-8d1a-bd334ba54d61",
      "name": "Merge Github and n8n workflows - Keep only non existing workflows based on the name",
      "type": "n8n-nodes-base.merge",
      "position": [
        2740,
        500
      ],
      "typeVersion": 2.1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## Merge Github and n8n workflows\n\nHere, we only keep the workflows from Github that doesn't already exist in n8n workspace, based on the name",
        "height": 196.65095879641083,
        "width": 260.44696745223945,
        "color": 2
      },
      "id": "c7ffe214-1d7b-4f4f-87c1-36d9cb8e43a9",
      "name": "Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2660,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Create n8n workflow\n\nCreate the n8n workflow using:\n- Content saved in Github\n- Name of the file in Github\n\n\nIf the workflow name already exist in n8n, then the workflow is not created - to avoid duplicates.",
        "height": 237.66186698228626,
        "width": 344.0461264465236,
        "color": 2
      },
      "id": "3d84fd1c-c49b-4db0-951a-e38d50dae47b",
      "name": "Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3420,
        420
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Get existing n8n workflows\n\n1. Get all workflows\n2. Prepare a list of workflows in order to compare it with the workflows saved in the Github repo.",
        "height": 182.45487519360773,
        "width": 378.7476641422645,
        "color": 2
      },
      "id": "144a0b2e-d7b2-443d-91a5-96c09ef16b8e",
      "name": "Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1240,
        620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Input data should be passed into this function\nconst items = $input.all(); // Get all input items\nconst results = [];\n\nfor (let item of items) {\n  const input1 = item.json[\"content\"]; // Replace with the actual key\n  const input2 = item.json[\"name\"]; // Replace with the actual key\n  const updatedName = input2.replace('.json', '');\n  \n\n  if (input1 && typeof input1 === 'string') {\n    // Decoding the Base64 content\n    const decodedContent = Buffer.from(input1, 'base64').toString('utf-8');\n\n    // Add the decoded content to the results array\n    results.push({\n      input1: input1,\n      updatedName: updatedName,\n      decodedContent: decodedContent,\n    });\n  } else {\n    // Handle the case where input1 is undefined or not a valid type\n    results.push({\n      input1: input1,\n      updatedName: updatedName,\n      decodedContent: \"Invalid or undefined input1\",\n    });\n  }\n}\n\n// Set the results as the output\nreturn results;\n"
      },
      "id": "f80acbb3-f17e-48ab-aa02-10461ca1de3a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        300
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "name, content",
        "options": {}
      },
      "id": "6fb33f34-b4c4-472f-b185-dc1b0ec23272",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1840,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fd858e57-427e-4b6c-9c25-04ccef4d7df8",
              "leftValue": "={{ $json.content }}",
              "rightValue": "Invalid or undefined input1",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fc0b1633-d07f-4f33-ba92-7bfb8170d095",
      "name": "Filter",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        2460,
        300
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "timezone": "Africa/Johannesburg",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-22T07:17:26.137Z",
      "updatedAt": "2024-08-22T07:17:26.137Z",
      "id": "qrwz7JNGZaL6dEmV",
      "name": "backup-&-recovery"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-08-22T17:29:05.000Z",
  "versionId": "3bbe62e8-85dc-4d57-a77e-39048f91440f"
}