{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "get_products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_products": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Check Product Entry",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Product Entry": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create store in SM1": {
      "main": [
        [
          {
            "node": "Lookup SM Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Link product to store in SM": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Message Formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Formatting": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Message Formatting1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Link product to store in SM1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Formatting1": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create store in SM1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update product and  store in SM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update product and  store in SM": {
      "main": [
        [
          {
            "node": "Check Product Entry2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Product Entry2": {
      "main": [
        [
          {
            "node": "Link product to store in SM1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup SM Store": {
      "main": [
        [
          {
            "node": "Link product to store in SM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-08-13T18:49:14.242Z",
  "id": "iv2j254t8K5fLvc6",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "lemonsqueezy product & stores pipleline",
  "nodes": [
    {
      "parameters": {},
      "id": "860181e1-bcce-47ad-941c-42c344602c71",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1000,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://api.lemonsqueezy.com/v1/products?include=store",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.api+json"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NGQ1OWNlZi1kYmI4LTRlYTUtYjE3OC1kMjU0MGZjZDY5MTkiLCJqdGkiOiIyNDU4NjVlYTk3MmFkMGUzYmFjMTliNDlhMDYxNmE2OGY5OTExNjc2NDUwMmM1NWU0MzcxMzQ1M2U0Y2U5OGEwYjI2ZWI2NjgxOWFjMjNkYSIsImlhdCI6MTcyMzU2NzQwOS4zOTkxMDQsIm5iZiI6MTcyMzU2NzQwOS4zOTkxMDYsImV4cCI6MjAzOTEwMDIwOS4zNTk1NzMsInN1YiI6IjEyMDg5NTMiLCJzY29wZXMiOltdfQ.qs-XNkplfkn8msFkHnMn_RmVWWG2Gou0n_GVMuQU0hXwZmzRqRiLR6Rei88fKqWScCNOL9OfLYnSawvSlAnF3u1ZSR2FYLMrh8Iyc8aeT4v7Bm7WtmXiK4WLD3Ti4GMqx0-n9MoJRuHa4ZhNBAIjOw2B8t1aNZJcQtccpeLTEkFogyWprf7LaYbcvA5q6nTsYaCAj6kZ5tZHQppqQ1UsR6rSzCmEsVL8cxI_J6DyqRpmZ9I-pQJa2fLdWeB8QeGd7Bt98b9XyYMtWXwDqj4tUUoAfxmlGqY4Be6At1HmjGaBWpvt0-TsGPmHGJhLCqSPnaC-26wPiZn1fUkVAeT9VzrIWIVaUHFdB1zggcGU5C4Nb73vQ60b9YXm8KogwbrGLRHbThW73KqvK8Bc0_MwjNr8siistjsWCYWN7OuzRmOVoD_Rpzyx8A-O_C4unLIczii7ijH8XuYn58ZNvZkdp2s1QI1_Xlx-K-tAB24jQ7oUCIjf9o-n7knBQrpIJyjj"
            }
          ]
        },
        "options": {}
      },
      "id": "55641ff5-2d6c-467a-afaf-4bb07938553c",
      "name": "get_products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -760,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const contentString = items[0].json.data;\nlet parsedContent;\n\ntry {\n    parsedContent = JSON.parse(contentString);\n} catch (e) {\n    return [{ json: { error: 'Invalid JSON format' } }];\n}\n\nreturn [\n    {\n        json: parsedContent\n    }\n];"
      },
      "id": "01dffe1e-c4b9-40fb-8748-a74b639561b9",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        0
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "45dc75f6-66dc-4e12-b397-3a6f75ade64a",
      "name": "Link product to store in SM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        -140
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "83393dec-ad59-494b-a59b-961f8e511aa0",
      "name": "Link product to store in SM1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        40
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "include": "selectedOtherFields",
        "fieldsToInclude": "items",
        "options": {}
      },
      "id": "8a2374a9-35d3-4ad4-b4e5-afba7014d032",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -100,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.smartsuite.com/api/v1/applications/66bba63ce24d2ee29028e068/records/list/",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "offet",
              "value": "0"
            },
            {
              "name": "limit",
              "value": "25"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token 1a0df485ce520ec8d8e999727c53c09ef809b097"
            },
            {
              "name": "ACCOUNT-ID",
              "value": "swexdc6g"
            }
          ]
        },
        "options": {}
      },
      "id": "176fd944-0143-4744-8ac9-ae4f9149a29b",
      "name": "Check Product Entry",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -300,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.smartsuite.com/api/v1/applications/66bba94fe555519ad8cb2b58/records/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token 1a0df485ce520ec8d8e999727c53c09ef809b097"
            },
            {
              "name": "ACCOUNT-ID",
              "value": "swexdc6g"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"description\": \"{{ $json.attributes.description }}\",\n  \"stoplight_status\": \"1\",\n  \"status\": {\n    \"value\": \"in_progress\"\n  },\n  \"s1c02fcf6f\": \"{{ $json.type }}\", \n  \"sa7e639fac\": \"{{ $json.id }}\",\n  \"s762407c0f\": \"{{ $json.attributes.store_id }}\",\n  \"sc7204a3d7\": \"{{ $json.attributes.name }}\",\n  \"s22e5fbd34\": \"{{ $json.attributes.slug }}\",\n  \"s03f71e992\": \"{{ $json.attributes.status }}\",\n  \"sbd6dfffa6\": \"{{ $json.attributes.status_formatted }}\",\n  \"s75a5e2da3\": \"{{ $json.attributes.thumb_url }}\",\n  \"s78f09e28a\": \"{{ $json.attributes.large_thumb_url }}\",\n  \"s9d5c47a49\": \"{{ $json.attributes.price }}\",\n  \"sd2e8050a9\": \"{{ $json.attributes.price_formatted }}\",\n  \"sc31c5ea0d\": \"{{ $json.attributes.from_price }}\",\n  \"s690e98405\": \"{{ $json.attributes.to_price }}\",\n  \"sb94fb975c\": \"{{ $json.attributes.pay_what_you_want }}\",\n  \"s2e850650a\": \"{{ $json.attributes.buy_now_url }}\",\n  \"s6e56cc0a2\": \"{{ $json.attributes.from_price_formatted }}\",\n  \"sfb5338a19\": \"{{ $json.attributes.to_price_formatted }}\",\n  \"s74354ed71\": \"{{ $json.attributes.created_at }}\",\n  \"s1fc46d69a\": \"{{ $json.attributes.updated_at }}\",\n  \"s7e1e307e1\": \" {{ $json.attributes.test_mode }}\"\n\n}                ",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 5,
              "batchInterval": 120
            }
          }
        }
      },
      "id": "1180c7bf-669c-489b-87ec-16c3d261a776",
      "name": "Create store in SM1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        -140
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "id": "7fb487a8-6f73-4348-9f94-46db9173c33b",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -200,
        80
      ]
    },
    {
      "parameters": {
        "otherOptions": {}
      },
      "id": "df912e48-2741-429d-898c-56cde872fabb",
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        1480,
        -60
      ]
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "title"
            },
            {
              "fieldToAggregate": "sf7335e6da"
            },
            {
              "fieldToAggregate": "status"
            },
            {
              "fieldToAggregate": "s2e7d2b64e"
            },
            {
              "fieldToAggregate": "se6d1375cc"
            },
            {
              "fieldToAggregate": "s6e80240de"
            },
            {
              "fieldToAggregate": "s388b58221"
            },
            {
              "fieldToAggregate": "description.data.content[0].content[0].text"
            }
          ]
        },
        "options": {}
      },
      "id": "00b2c836-862d-44d0-871c-eaf786f19f37",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1020,
        -140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Assuming 'AggregatedData' is the name of the node with the aggregated data\nconst aggregatedData = $node[\"Aggregate\"].json;\n\n// Prepare the message\nlet message = 'Hi Team,\\n\\nNew time entries are ready for review. Here are the details:\\n\\n';\n\nconst dates = [...new Set(aggregatedData.s2e7d2b64e)];\n\ndates.forEach(date => {\n  message += `*Date:* ${date}\\n`;\n  message += `*Client:* ${aggregatedData.s388b58221[0]}\\n`;\n   message += '\\n\\n';\n  message += '```\\n';  // Start block quote for grey frame\n  message += 'Title                      | Status               | Worked Hours  | Description\\n';\n  message += '---------------------------|----------------------|---------------|----------------------------------------------\\n';\n  \n  aggregatedData.s2e7d2b64e.forEach((entryDate, index) => {\n    if (entryDate === date) {\n      const title = aggregatedData.title[index].padEnd(27, ' ');\n      const status = aggregatedData.status[index].value.padEnd(20, ' ');\n      const hours = aggregatedData.se6d1375cc[index].toString().padEnd(13, ' ');\n      const description = aggregatedData.text[index];\n      message += `${title}| ${status} | ${hours} | ${description}\\n`;\n    }\n  });\n  message += '```\\n\\n';  // End block quote for grey frame\n});\n\nmessage += '\\nPlease review these entries at your earliest convenience.\\nThank you!\\n';\n\nreturn [\n  {\n    json: {\n      message: message\n    }\n  }\n];"
      },
      "id": "e2aec0e5-dfe4-45cd-8bbf-a9a2c3f425e6",
      "name": "Message Formatting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        -140
      ]
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "title"
            },
            {
              "fieldToAggregate": "sf7335e6da"
            },
            {
              "fieldToAggregate": "status"
            },
            {
              "fieldToAggregate": "s2e7d2b64e"
            },
            {
              "fieldToAggregate": "se6d1375cc"
            },
            {
              "fieldToAggregate": "s6e80240de"
            },
            {
              "fieldToAggregate": "s388b58221"
            },
            {
              "fieldToAggregate": "description.data.content[0].content[0].text"
            }
          ]
        },
        "options": {}
      },
      "id": "1f50b9a3-3602-4f21-90b1-74cd6c8e5703",
      "name": "Aggregate1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1020,
        40
      ]
    },
    {
      "parameters": {
        "jsCode": "// Assuming 'AggregatedData' is the name of the node with the aggregated data\nconst aggregatedData = $node[\"Aggregate1\"].json;\n\n// Prepare the message\nlet message = 'Hi Team,\\n\\nNew time entries are ready for review. Here are the details:\\n\\n';\n\nconst dates = [...new Set(aggregatedData.s2e7d2b64e)];\n\ndates.forEach(date => {\n  message += `*Date:* ${date}\\n`;\n  message += `*Client:* ${aggregatedData.s388b58221[0]}\\n`;\n   message += '\\n\\n';\n  message += '```\\n';  // Start block quote for grey frame\n  message += 'Title                      | Status               | Worked Hours  | Description\\n';\n  message += '---------------------------|----------------------|---------------|----------------------------------------------\\n';\n  \n  aggregatedData.s2e7d2b64e.forEach((entryDate, index) => {\n    if (entryDate === date) {\n      const title = aggregatedData.title[index].padEnd(27, ' ');\n      const status = aggregatedData.status[index].value.padEnd(20, ' ');\n      const hours = aggregatedData.se6d1375cc[index].toString().padEnd(13, ' ');\n      const description = aggregatedData.text[index];\n      message += `${title}| ${status} | ${hours} | ${description}\\n`;\n    }\n  });\n  message += '```\\n\\n';  // End block quote for grey frame\n});\n\nmessage += '\\nPlease review these entries at your earliest convenience.\\nThank you!\\n';\n\nreturn [\n  {\n    json: {\n      message: message\n    }\n  }\n];"
      },
      "id": "f8f370b6-11c5-4b74-83f1-fd511ec03f2c",
      "name": "Message Formatting1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "24159261-0eb3-4d82-8bd8-ce419176c972",
              "leftValue": "={{ $json.id }}",
              "rightValue": "={{ $json.items[0].sa7e639fac }}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a6157854-c50c-4614-aec3-d6c2aa57bdbc",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        140,
        -20
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.smartsuite.com/api/v1/applications/66bba94fe555519ad8cb2b58/records/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token 1a0df485ce520ec8d8e999727c53c09ef809b097"
            },
            {
              "name": "ACCOUNT-ID",
              "value": "swexdc6g"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"description\": \"{{ $json.attributes.description }}\",\n  \"stoplight_status\": \"1\",\n  \"status\": {\n    \"value\": \"in_progress\"\n  },\n  \"s1c02fcf6f\": \"{{ $json.type }}\", \n  \"sa7e639fac\": \"{{ $json.id }}\",\n  \"s762407c0f\": \"{{ $json.attributes.store_id }}\",\n  \"sc7204a3d7\": \"{{ $json.attributes.name }}\",\n  \"s22e5fbd34\": \"{{ $json.attributes.slug }}\",\n  \"s03f71e992\": \"{{ $json.attributes.status }}\",\n  \"sbd6dfffa6\": \"{{ $json.attributes.status_formatted }}\",\n  \"s75a5e2da3\": \"{{ $json.attributes.thumb_url }}\",\n  \"s78f09e28a\": \"{{ $json.attributes.large_thumb_url }}\",\n  \"s9d5c47a49\": \"{{ $json.attributes.price }}\",\n  \"sd2e8050a9\": \"{{ $json.attributes.price_formatted }}\",\n  \"sc31c5ea0d\": \"{{ $json.attributes.from_price }}\",\n  \"s690e98405\": \"{{ $json.attributes.to_price }}\",\n  \"sb94fb975c\": \"{{ $json.attributes.pay_what_you_want }}\",\n  \"s2e850650a\": \"{{ $json.attributes.buy_now_url }}\",\n  \"s6e56cc0a2\": \"{{ $json.attributes.from_price_formatted }}\",\n  \"sfb5338a19\": \"{{ $json.attributes.to_price_formatted }}\",\n  \"s74354ed71\": \"{{ $json.attributes.created_at }}\",\n  \"s1fc46d69a\": \"{{ $json.attributes.updated_at }}\",\n  \"s7e1e307e1\": \" {{ $json.attributes.test_mode }}\"\n\n}                ",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 5,
              "batchInterval": 120
            }
          }
        }
      },
      "id": "c238a4e9-2393-4ba5-a960-cfe95d23b2b0",
      "name": "Update product and  store in SM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.smartsuite.com/api/v1/applications/66bba63ce24d2ee29028e068/records/list/",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "offet",
              "value": "0"
            },
            {
              "name": "limit",
              "value": "25"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token 1a0df485ce520ec8d8e999727c53c09ef809b097"
            },
            {
              "name": "ACCOUNT-ID",
              "value": "swexdc6g"
            }
          ]
        },
        "options": {}
      },
      "id": "e7165494-788e-4c64-bb7c-6dac2731158a",
      "name": "Check Product Entry2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.smartsuite.com/api/v1/applications/66bba63ce24d2ee29028e068/records/list/",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "offet",
              "value": "0"
            },
            {
              "name": "limit",
              "value": "25"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token 1a0df485ce520ec8d8e999727c53c09ef809b097"
            },
            {
              "name": "ACCOUNT-ID",
              "value": "swexdc6g"
            }
          ]
        },
        "options": {}
      },
      "id": "064b2dfd-b70d-43f6-b46b-2865a1b8ca55",
      "name": "Lookup SM Store",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        -140
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-11T09:05:52.167Z",
      "updatedAt": "2024-08-11T09:14:06.583Z",
      "id": "zlJZt3Fo1ZYAvCNp",
      "name": "sales & marketing"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-08-17T15:21:34.000Z",
  "versionId": "3494d9e0-3ff9-4c23-be89-646b61f6dceb"
}