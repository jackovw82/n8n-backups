{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "get_products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_products": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-08-13T18:49:14.242Z",
  "id": "iv2j254t8K5fLvc6",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "lemonsqueezy product & stores",
  "nodes": [
    {
      "parameters": {},
      "id": "860181e1-bcce-47ad-941c-42c344602c71",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -160,
        460
      ]
    },
    {
      "parameters": {
        "url": "https://api.lemonsqueezy.com/v1/products?include=store",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.api+json"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NGQ1OWNlZi1kYmI4LTRlYTUtYjE3OC1kMjU0MGZjZDY5MTkiLCJqdGkiOiIyNDU4NjVlYTk3MmFkMGUzYmFjMTliNDlhMDYxNmE2OGY5OTExNjc2NDUwMmM1NWU0MzcxMzQ1M2U0Y2U5OGEwYjI2ZWI2NjgxOWFjMjNkYSIsImlhdCI6MTcyMzU2NzQwOS4zOTkxMDQsIm5iZiI6MTcyMzU2NzQwOS4zOTkxMDYsImV4cCI6MjAzOTEwMDIwOS4zNTk1NzMsInN1YiI6IjEyMDg5NTMiLCJzY29wZXMiOltdfQ.qs-XNkplfkn8msFkHnMn_RmVWWG2Gou0n_GVMuQU0hXwZmzRqRiLR6Rei88fKqWScCNOL9OfLYnSawvSlAnF3u1ZSR2FYLMrh8Iyc8aeT4v7Bm7WtmXiK4WLD3Ti4GMqx0-n9MoJRuHa4ZhNBAIjOw2B8t1aNZJcQtccpeLTEkFogyWprf7LaYbcvA5q6nTsYaCAj6kZ5tZHQppqQ1UsR6rSzCmEsVL8cxI_J6DyqRpmZ9I-pQJa2fLdWeB8QeGd7Bt98b9XyYMtWXwDqj4tUUoAfxmlGqY4Be6At1HmjGaBWpvt0-TsGPmHGJhLCqSPnaC-26wPiZn1fUkVAeT9VzrIWIVaUHFdB1zggcGU5C4Nb73vQ60b9YXm8KogwbrGLRHbThW73KqvK8Bc0_MwjNr8siistjsWCYWN7OuzRmOVoD_Rpzyx8A-O_C4unLIczii7ijH8XuYn58ZNvZkdp2s1QI1_Xlx-K-tAB24jQ7oUCIjf9o-n7knBQrpIJyjj"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "55641ff5-2d6c-467a-afaf-4bb07938553c",
      "name": "get_products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        460
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "715b636e-d0dc-4196-a31b-f900797466db",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "de96e5ae-2d0a-4593-b18f-a7e2370fab9c",
      "name": "Parse JSON",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        540,
        460
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "responseJSON",
        "options": {}
      },
      "id": "9630cd6b-a03e-47cd-9db1-ae4048604050",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        760,
        460
      ]
    },
    {
      "parameters": {
        "jsCode": "// Step 1: Get the outer JSON string from the previous node's output\nconst outerJsonString = $input.first().json.data;\n\n// Step 2: Parse the outer JSON string to access the nested JSON string\nlet outerParsedData;\ntry {\n  outerParsedData = JSON.parse(outerJsonString);\n} catch (error) {\n  return [{ json: { error: \"Invalid outer JSON format: \" + error.message } }];\n}\n\n// Step 3: Parse the inner JSON string (nested data)\nlet innerParsedData;\ntry {\n  innerParsedData = JSON.parse(outerParsedData.data);\n} catch (error) {\n  return [{ json: { error: \"Invalid inner JSON format: \" + error.message } }];\n}\n\n// Step 4: Return the un-nested data so that it can be used in further workflow steps\nreturn [\n  {\n    json: innerParsedData\n  }\n];\n"
      },
      "id": "01dffe1e-c4b9-40fb-8748-a74b639561b9",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        460
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-11T09:05:52.167Z",
      "updatedAt": "2024-08-11T09:14:06.583Z",
      "id": "zlJZt3Fo1ZYAvCNp",
      "name": "sales & marketing"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-08-15T09:28:17.000Z",
  "versionId": "facc509b-32ea-4467-9ea3-d026a424e92e"
}